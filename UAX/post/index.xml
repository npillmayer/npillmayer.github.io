<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ⋮Seg⋮ment⋮ing⋮ ⋮Uni⋮code⋮</title>
    <link>https://npillmayer.github.io/UAX/post/</link>
    <description>Recent content in Posts on ⋮Seg⋮ment⋮ing⋮ ⋮Uni⋮code⋮</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Norbert Pillmayer</copyright>
    <lastBuildDate>Sat, 20 Nov 2021 20:18:00 +0100</lastBuildDate>
    
        <atom:link href="https://npillmayer.github.io/UAX/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>⋮What⋮ ⋮is⋮ ⋮a⋮ ⋮Type⋮set⋮ting⋮-⋮Stack⋮?</title>
      <link>https://npillmayer.github.io/UAX/2021/typesetting-stack/</link>
      <pubDate>Sat, 20 Nov 2021 20:18:00 +0100</pubDate>
      
      <guid>https://npillmayer.github.io/UAX/2021/typesetting-stack/</guid>
      <description>The other day I had reason to think about what actually comprises a typesetting stack. Typesetting allows the documents you compiled to be read on a output medium. For this post I&amp;rsquo;ll focus on screen-output.
Other have tried to give a systematic overview of what typesetting is. Nevertheless, I&amp;rsquo;ll jot down my own attempt, focussing on UAX, i.e. the Unicode recommendations and algorithms for various aspects of text segmentation.
A Walk through the Layout Process It&amp;rsquo;s clear that the rules of various Unicode annexes play an important role during typsetting.</description>
    </item>
    
    <item>
      <title>⋮Bidi:⋮ ⋮What⋮ ⋮You⋮ ⋮See⋮ ⋮isn&#39;t⋮ ⋮What⋮ ⋮You⋮ ⋮Get⋮</title>
      <link>https://npillmayer.github.io/UAX/2021/bidi-console/</link>
      <pubDate>Wed, 24 Feb 2021 10:00:00 +0100</pubDate>
      
      <guid>https://npillmayer.github.io/UAX/2021/bidi-console/</guid>
      <description>I stumbled across the problem of bidirectional text in terminals while trying to test a variant of the Unicode Bidirectional Algorithm. The Unicode consortium publishes a set of bidi test-cases, which suffer from being somewhat “non-visual”. At the end of the day you want to deal with real sentences in real languages and scripts. Preparing that, you face a peculiar problem: how do you display your test output? After all, UAX#9 is about visual ordering of characters.</description>
    </item>
    
    <item>
      <title>⋮Text⋮ ⋮vs⋮ ⋮Strings⋮</title>
      <link>https://npillmayer.github.io/UAX/2021/text-vs-strings/</link>
      <pubDate>Sat, 16 Jan 2021 10:00:00 +0100</pubDate>
      
      <guid>https://npillmayer.github.io/UAX/2021/text-vs-strings/</guid>
      <description>In the unlikely event of a software developer and a typographer attending the same party and—even more unlikely—enganging in some small talk, they certainly are prone to a fundamental disagreement: What is the nature of text? As an IT guy with a heavy interest in typography, I even find me in disagreement with myself, clearly an unhealthy state of mind. As a typographer I may think about beautiful books, fine typecases or craftsmanship in layout, as a bibliophile I may think about inspired literature or enlightened non-fiction, but as a programmer I mainly think of the hassle with UTF-8, emojis, limitations of string libaries and so on.</description>
    </item>
    
    <item>
      <title>⋮The⋮ ⋮Per⋮ils⋮ ⋮of⋮ ⋮Seg⋮ment⋮ing⋮ ⋮Text⋮</title>
      <link>https://npillmayer.github.io/UAX/2020/problem-statement/</link>
      <pubDate>Fri, 04 Dec 2020 11:54:16 +0100</pubDate>
      
      <guid>https://npillmayer.github.io/UAX/2020/problem-statement/</guid>
      <description>Breaking Unicode Text into Segments Text processing applications need to segment text into pieces. Segments may be
 words, sentences, paragraphs  and so on. For western languages this is not too hard of a problem, but it may become an involved endeavor if you consider Arabic or Asian languages. From a typographic viewpoint some of these languages present serious challenges for correct segmenting. The Unicode consortium publishes recommendations and algorithms for various aspects of text segmentation in their Unicode Annexes (UAX).</description>
    </item>
    
  </channel>
</rss>
